#pragma once

#include <ctime>
#include <set>
#include <mutex>
#include "../common/header.h"
#include <unistd.h>
#include "../socket/socket.h"
#include "../operation/operation.h"
#include <atomic>
#define MAX_AGE 3			// 定义心跳包时间
#define MAX_SN_CNT 256		// sn号数量，表示0 - MAX_SN_CNT - 1
#define MAX_RECONNECT_CNT 3 // 定义最大重连次数
#define MAX_RESEND_CNT 3 // 定义最大重发次数
#define INTERVAL 10			// 定义时间区间长度
#define MAX_LOSS_CNT 10		// 区间内最大丢包数量

class CSerial
{
public:
	CSerial();
	~CSerial() = default;

	void run();
	void cwrite(unsigned char sn, unsigned char ft);
	void cwrite(unsigned char sn, unsigned char ft, unsigned char dst, unsigned char src, unsigned char* data, unsigned char length);
    void cwrite_Fault_REP_Frame(unsigned char type,unsigned char value);
	void cwrite_Alarm_REP_Frame(unsigned char type,unsigned char value);
	void cwrite_Check_SET1_Frame(unsigned char type,unsigned char value);
	void cwrite_mcu_state(unsigned short type);

	void write_with_ack(unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);// 统一发送函数

	void cwrite_OP4_Frame(unsigned char type, unsigned char *value);
	void cwrite_OP6_Frame(unsigned char value);
	void cwrite_OP8_Frame(unsigned char value);

	void heartFrameAck(unsigned char sn);
	void dataFrameAck(unsigned char sn);

    //在软件启动时调用、在状态从VISDECT转移到AUTO_DETECT时调用
	void cwrite_OP10_Frame(unsigned char sn, unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);
	//获取帧号
	int get_cur_frame_sn();
	void cwrite_OP11_Frame(unsigned char sn, unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);
	void cwrite_OP12_Frame(unsigned char sn, unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);

	//无帧号版本
	void cwrite_OP10_Frame(unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);
	void cwrite_OP11_Frame(unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);
	void cwrite_OP12_Frame(unsigned char ft, unsigned char dst, unsigned char src, unsigned char *data, unsigned char length);

	void cwrite_OP13_Frame(unsigned char dst, unsigned char src, unsigned char* data, unsigned char length);

	void checkHeart(); // 检测心跳函数,应由单独线程执行

	static void enumerate_ports();

	struct alm_data
	{ // 告警数据帧数据部分类型封装
		unsigned char type;
		unsigned char value;
	};

	// status指令相关
	char status_type_b0b1 = 0x00; // 织片转台
	char status_type_b2 = 0x00; // 位置传感器对齐
	char status_type_b3 = 0x00; // 机台自动运行

private:
	unsigned char PC = 0x10, MCU = 0x12; // pc和mcu的地址
	unsigned char FRAME_FT = 0X01; // ft的值
	set<unsigned char> sn_set;		   //用于存储暂未收到确认帧的帧号集合
	atomic <unsigned char> cur_frame_sn;		   //用于标识当前数据帧的sn
	mutable std::mutex _mutex; //用来锁cur_frame_sn的

	serial::Serial *h_serial;

	// serial::Serial* h_serial;

	unsigned char aucCRCHi[256] = {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40};

	unsigned char aucCRCLo[256] = {
		0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
		0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
		0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
		0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
		0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
		0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
		0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
		0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
		0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

	int cur_bytes_status = HEAD;

	unsigned char CRC_buffer[64]{};
	unsigned char read_buffer[64]{};
	std::deque<unsigned char> handle_buffer;
	unsigned char write_buffer[64]{FRAME_HEAD_0, FRAME_HEAD_1};

	unsigned char read_index = 0;
	unsigned char write_index = 0;

	unsigned char data_length = 0;
	unsigned char cur_frame_type = 0;

	unsigned char loop_sn = 0;

	unsigned short usMBCRC16(unsigned char *pucFrame, unsigned short usLen);

	int test_cnt = 0;

	std::time_t last_frame_time = 0; // 最后一次接收到frame时间，硬件目前有dataframe直接发，没有的话才发心跳frame

	int last_hb_sn = -1, last_data_sn = -1, temp_sn = -1; // 心跳帧的SN号和数据帧的SN号，都从0-255循环发送, temp_sn用于读取到sn时临时存储下

	deque<time_t> interval_queue;

	bool addAndJdugeInterval(time_t cur); // 判断是否超过了区间内允许的最大丢帧数量
};